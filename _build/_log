### Starting build.
# Target: main.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:main.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules main.ml > main.ml.depends
# Target: imp.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:imp.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules imp.ml > imp.ml.depends # cached
# Target: imp.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:imp.cmo, file:imp.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o imp.cmo imp.ml # cached
# Target: lexer.mll, tags: { package(aez), package(batteries), package(core), package(str), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, thread, traverse }
/home/marinelay/.opam/4.09.0/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { package(aez), package(batteries), package(core), package(str), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet, thread, traverse }
/home/marinelay/.opam/4.09.0/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o lexer.cmo lexer.ml # cached
# Target: localize.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:localize.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules localize.ml > localize.ml.depends # cached
# Target: label_lang.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:label_lang.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules label_lang.ml > label_lang.ml.depends # cached
# Target: label_lang.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:label_lang.cmo, file:label_lang.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o label_lang.cmo label_lang.ml # cached
# Target: labeling.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:labeling.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules labeling.ml > labeling.ml.depends # cached
# Target: labeling.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:labeling.cmo, file:labeling.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o labeling.cmo labeling.ml # cached
# Target: localize.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:localize.cmo, file:localize.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o localize.cmo localize.ml # cached
# Target: options.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:options.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules options.ml > options.ml.depends # cached
# Target: options.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:options.cmo, file:options.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o options.cmo options.ml # cached
# Target: main.cmo, tags: { package(aez), package(batteries), package(core), package(str), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package aez -package str -package core -package batteries -o main.cmo main.ml
# Target: imp.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:imp.cmx, file:imp.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o imp.cmx imp.ml # cached
# Target: parser.ml.depends, tags: { package(aez), package(batteries), package(core), package(str), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package aez -package str -package core -package batteries -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o lexer.cmx lexer.ml # cached
# Target: label_lang.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:label_lang.cmx, file:label_lang.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o label_lang.cmx label_lang.ml # cached
# Target: labeling.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:labeling.cmx, file:labeling.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o labeling.cmx labeling.ml # cached
# Target: localize.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:localize.cmx, file:localize.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o localize.cmx localize.ml # cached
# Target: options.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:options.cmx, file:options.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o options.cmx options.ml # cached
# Target: main.cmx, tags: { package(aez), package(batteries), package(core), package(str), compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package aez -package str -package core -package batteries -o main.cmx main.ml
# Target: main.native, tags: { package(aez), package(batteries), package(core), package(str), dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet, thread, traverse }
ocamlfind ocamlopt -linkpkg -thread -package aez -package str -package core -package batteries imp.cmx label_lang.cmx labeling.cmx parser.cmx lexer.cmx localize.cmx options.cmx main.cmx -o main.native
# Compilation successful.
